// Code generated by BobGen sql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package bob_gen

import (
	"context"
	"io"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/dm"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
)

// Weather is an object representing the database table.
type Weather struct {
	ID string `db:"id,pk" `
}

// WeatherSlice is an alias for a slice of pointers to Weather.
// This should almost always be used instead of []*Weather.
type WeatherSlice []*Weather

// Weathers contains methods to work with the weather table
var Weathers = sqlite.NewTablex[*Weather, WeatherSlice, *WeatherSetter]("", "weather")

// WeathersQuery is a query on the weather table
type WeathersQuery = *sqlite.ViewQuery[*Weather, WeatherSlice]

type weatherColumnNames struct {
	ID string
}

var WeatherColumns = buildWeatherColumns("weather")

type weatherColumns struct {
	tableAlias string
	ID         sqlite.Expression
}

func (c weatherColumns) Alias() string {
	return c.tableAlias
}

func (weatherColumns) AliasedAs(alias string) weatherColumns {
	return buildWeatherColumns(alias)
}

func buildWeatherColumns(alias string) weatherColumns {
	return weatherColumns{
		tableAlias: alias,
		ID:         sqlite.Quote(alias, "id"),
	}
}

type weatherWhere[Q sqlite.Filterable] struct {
	ID sqlite.WhereMod[Q, string]
}

func (weatherWhere[Q]) AliasedAs(alias string) weatherWhere[Q] {
	return buildWeatherWhere[Q](buildWeatherColumns(alias))
}

func buildWeatherWhere[Q sqlite.Filterable](cols weatherColumns) weatherWhere[Q] {
	return weatherWhere[Q]{
		ID: sqlite.Where[Q, string](cols.ID),
	}
}

var WeatherErrors = &weatherErrors{
	ErrUniqueSqliteAutoindexWeather1: &UniqueConstraintError{s: "sqlite_autoindex_weather_1"},
}

type weatherErrors struct {
	ErrUniqueSqliteAutoindexWeather1 *UniqueConstraintError
}

// WeatherSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type WeatherSetter struct {
	ID omit.Val[string] `db:"id,pk" `
}

func (s WeatherSetter) SetColumns() []string {
	vals := make([]string, 0, 1)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	return vals
}

func (s WeatherSetter) Overwrite(t *Weather) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
}

func (s *WeatherSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Weathers.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	if len(q.Table.Columns) == 0 {
		q.Table.Columns = s.SetColumns()
	}

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 0, 1)
		if !s.ID.IsUnset() {
			vals = append(vals, sqlite.Arg(s.ID))
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s WeatherSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s WeatherSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 1)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	return exprs
}

// FindWeather retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindWeather(ctx context.Context, exec bob.Executor, IDPK string, cols ...string) (*Weather, error) {
	if len(cols) == 0 {
		return Weathers.Query(
			SelectWhere.Weathers.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Weathers.Query(
		SelectWhere.Weathers.ID.EQ(IDPK),
		sm.Columns(Weathers.Columns().Only(cols...)),
	).One(ctx, exec)
}

// WeatherExists checks the presence of a single record by primary key
func WeatherExists(ctx context.Context, exec bob.Executor, IDPK string) (bool, error) {
	return Weathers.Query(
		SelectWhere.Weathers.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Weather is retrieved from the database
func (o *Weather) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Weathers.AfterSelectHooks.RunHooks(ctx, exec, WeatherSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Weathers.AfterInsertHooks.RunHooks(ctx, exec, WeatherSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Weathers.AfterUpdateHooks.RunHooks(ctx, exec, WeatherSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Weathers.AfterDeleteHooks.RunHooks(ctx, exec, WeatherSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the Weather
func (o *Weather) PrimaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

func (o *Weather) pkEQ() dialect.Expression {
	return sqlite.Quote("weather", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Weather
func (o *Weather) Update(ctx context.Context, exec bob.Executor, s *WeatherSetter) error {
	v, err := Weathers.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single Weather record with an executor
func (o *Weather) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Weathers.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Weather using the executor
func (o *Weather) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Weathers.Query(
		SelectWhere.Weathers.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after WeatherSlice is retrieved from the database
func (o WeatherSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Weathers.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Weathers.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Weathers.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Weathers.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o WeatherSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return sqlite.Raw("NULL")
	}

	return sqlite.Quote("weather", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o WeatherSlice) copyMatchingRows(from ...*Weather) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o WeatherSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Weathers.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Weather:
				o.copyMatchingRows(retrieved)
			case []*Weather:
				o.copyMatchingRows(retrieved...)
			case WeatherSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Weather or a slice of Weather
				// then run the AfterUpdateHooks on the slice
				_, err = Weathers.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o WeatherSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Weathers.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Weather:
				o.copyMatchingRows(retrieved)
			case []*Weather:
				o.copyMatchingRows(retrieved...)
			case WeatherSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Weather or a slice of Weather
				// then run the AfterDeleteHooks on the slice
				_, err = Weathers.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o WeatherSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals WeatherSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Weathers.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o WeatherSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Weathers.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o WeatherSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Weathers.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}
