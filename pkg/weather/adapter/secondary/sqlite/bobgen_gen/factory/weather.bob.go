// Code generated by BobGen sql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"

	models "git.fruzit.pp.ua/weather/api/pkg/weather/adapter/secondary/sqlite/bobgen_gen"
	"github.com/aarondl/opt/omit"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type WeatherMod interface {
	Apply(*WeatherTemplate)
}

type WeatherModFunc func(*WeatherTemplate)

func (f WeatherModFunc) Apply(n *WeatherTemplate) {
	f(n)
}

type WeatherModSlice []WeatherMod

func (mods WeatherModSlice) Apply(n *WeatherTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// WeatherTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type WeatherTemplate struct {
	ID func() string

	f *Factory
}

// Apply mods to the WeatherTemplate
func (o *WeatherTemplate) Apply(mods ...WeatherMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Weather
// this does nothing with the relationship templates
func (o WeatherTemplate) toModel() *models.Weather {
	m := &models.Weather{}

	if o.ID != nil {
		m.ID = o.ID()
	}

	return m
}

// toModels returns an models.WeatherSlice
// this does nothing with the relationship templates
func (o WeatherTemplate) toModels(number int) models.WeatherSlice {
	m := make(models.WeatherSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Weather
// according to the relationships in the template. Nothing is inserted into the db
func (t WeatherTemplate) setModelRels(o *models.Weather) {}

// BuildSetter returns an *models.WeatherSetter
// this does nothing with the relationship templates
func (o WeatherTemplate) BuildSetter() *models.WeatherSetter {
	m := &models.WeatherSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}

	return m
}

// BuildManySetter returns an []*models.WeatherSetter
// this does nothing with the relationship templates
func (o WeatherTemplate) BuildManySetter(number int) []*models.WeatherSetter {
	m := make([]*models.WeatherSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Weather
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use WeatherTemplate.Create
func (o WeatherTemplate) Build() *models.Weather {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.WeatherSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use WeatherTemplate.CreateMany
func (o WeatherTemplate) BuildMany(number int) models.WeatherSlice {
	m := make(models.WeatherSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableWeather(m *models.WeatherSetter) {
	if m.ID.IsUnset() {
		m.ID = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Weather
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *WeatherTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Weather) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a weather and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *WeatherTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Weather, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a weather and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *WeatherTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Weather {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a weather and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *WeatherTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Weather {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a weather and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *WeatherTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Weather, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableWeather(opt)

	m, err := models.Weathers.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = weatherCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple weathers and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o WeatherTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.WeatherSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple weathers and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o WeatherTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.WeatherSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple weathers and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o WeatherTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.WeatherSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple weathers and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o WeatherTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.WeatherSlice, error) {
	var err error
	m := make(models.WeatherSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Weather has methods that act as mods for the WeatherTemplate
var WeatherMods weatherMods

type weatherMods struct{}

func (m weatherMods) RandomizeAllColumns(f *faker.Faker) WeatherMod {
	return WeatherModSlice{
		WeatherMods.RandomID(f),
	}
}

// Set the model columns to this value
func (m weatherMods) ID(val string) WeatherMod {
	return WeatherModFunc(func(o *WeatherTemplate) {
		o.ID = func() string { return val }
	})
}

// Set the Column from the function
func (m weatherMods) IDFunc(f func() string) WeatherMod {
	return WeatherModFunc(func(o *WeatherTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m weatherMods) UnsetID() WeatherMod {
	return WeatherModFunc(func(o *WeatherTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m weatherMods) RandomID(f *faker.Faker) WeatherMod {
	return WeatherModFunc(func(o *WeatherTemplate) {
		o.ID = func() string {
			return random_string(f)
		}
	})
}
